#!/usr/bin/perl

use feature qw(say);

=begin comment
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
=cut

sub find_next_n_primes {
  my ($primes, $n) = @_;
  print "Primes @$primes\n";
  $val = @$primes[-1];
  while ($n > 0){
    $val +=2;
    my $sqrt_val = sqrt($val);
    foreach my $p (@$primes){
      if($p > $sqrt_val){
        push @$primes, $val;
        $n--;
        last;
      } elsif ($val%$p == 0){
        last;
      }
    }
  }
  print "Last prime @$primes[-1]\n";
  write_array_to_file('primes.txt', @$primes);
}

sub write_array_to_file {
  my ($filename, @arr) = @_;
  print "@arr\n";
  print "$filename\n";
  open my $fh, '>', $filename or die "Cannot open $filename: $!";

  # Loop over the array
  foreach (@arr)
  {
      print $fh "$_\n"; # Print each entry in our array to the file
  }
  close $fh; # Not necessary, but nice to do
}


sub read_array_from_file {
  my ($filename) = @_;
  open(my $fh, '<:encoding(UTF-8)', $filename)
    or die "Could not open '$filename' $!";

  # Loop over lines
  @arr = ();
  while ( my $line = <$fh>){
    #Some processing $grid{$i} = [split( / /, $line)];
    push @arr, int($line);
  }
  close $fh; # Not necessary, but nice to do
  return @arr;
}

sub get_prime_factors{
  my ($num) = @_;
  my @primes = read_array_from_file('primes.txt');
  #print "@primes\n";
  #my @primes = (2,3,5,7,11);
  my $sqrt_num = sqrt($num);
  while($sqrt_num > @primes[-1]){
    find_next_n_primes(\@primes, 5);
  }
  %factor = (); 
  foreach my $p (@primes){
    if ($p > $sqrt_num){
      $factor{$num}=1;
      last;
    }
    if ($num % $p ==0){
      $factor{$p} = 0;
      while($num % $p == 0){
        $factor{$p}++;
        $num = $num/$p;
      } 
      if ($num == 1){
        last;
      } else {
        $sqrt_num = sqrt($num);
      }
    }
  }
  $num_factors = 1;
  foreach my $key (keys %factor) {
    $num_factors = $num_factors * ($factor{$key}+1);
    #print "Factor $key, $factor{$key} times\n";
  }
  return $num_factors;
  
}

sub check_num_divisors_triangulars {
  my ($num_div) = @_[0];
  my $res = 1;
  my $tnum = 1;
  my $i = 1;
  while ($res <= $num_div){
    $i++;
    $tnum+=$i;
  }
  $res = get_prime_factors($tnum);
  print "Number of divisors of $tnum = $res, i = $i\n";
  return $tnum;
}

#my $res = get_prime_factors(102431211);
$res = check_num_divisors_triangulars(500);
print "Result $res\n";
